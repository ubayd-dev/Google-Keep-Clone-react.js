{"ast":null,"code":"// import React, { createContext, useState, useContext } from \"react\";\n// import api from \"../services/axios.js\";\n// import { createNote } from \"../services/notes.js\";\n\n// // Create A Context\n// const FormContext = createContext();\n// export const FormProvider = ({ children }) => {\n//   const [notes, setNotes] = useState([]);\n//   const [loading, setLoading] = useState(false);\n\n//   // GET ALL NOTES\n//   const fetchNotes = async () => {\n//     setLoading(true);\n\n//     try {\n//       // HIT BACKEND CAL\n//       const res = await api.get(\"/notes\");\n//       //   STORE RESPONSE IN STATE, UPDATE STATE\n//       setNotes(res.data);\n//     } catch (e) {\n//       console.error(\"Error fetching notes:\", e);\n//     } finally {\n//       //   HIDE LOADING AFTER FETCH\n//       setLoading(false);\n//     }\n//   };\n//   const addNote = async ({ title, text }) => {\n//     try {\n//       const res = await api.post(\"/notes/create\", { title, content: text });\n//       setNotes((prevNotes) => [...prevNotes, res.data]);\n//     } catch (e) {\n//       console.error(\"Error adding note:\", e);\n//     }\n//   };\n//   const editNote = async ({ id, title, text }) => {\n//     try {\n//       const res = await api.patch(`/notes${id}`, { title, content: text });\n//       setNotes((prevNotes) =>\n//         prevNotes.map((note) => (note.id === id ? res.data : note))\n//       );\n//     } catch (e) {\n//       console.error(\"Error editing note:\", e);\n//     }\n//   };\n\n//   const deleteNote = async ({ id, title, text }) => {\n//     try {\n//       const res = await api.delete(\"/notes\", { title, context: text });\n//     } catch (e) {\n//       console.error(\"Error deleting note\");\n//     }\n//   };\n\n//   return (\n//     <FormContext.Provider\n//       value={{ notes, loading, fetchNotes, addNote, editNote, deleteNote }}\n//     >\n//       {children}\n//     </FormContext.Provider>\n//   );\n// };\n\n// export const useFormContext = () => useContext(FormContext);","map":{"version":3,"names":[],"sources":["/Users/thaqibubayd/Desktop/google-keep-react-app/frontend/src/context/FormContext.js"],"sourcesContent":["// import React, { createContext, useState, useContext } from \"react\";\n// import api from \"../services/axios.js\";\n// import { createNote } from \"../services/notes.js\";\n\n// // Create A Context\n// const FormContext = createContext();\n// export const FormProvider = ({ children }) => {\n//   const [notes, setNotes] = useState([]);\n//   const [loading, setLoading] = useState(false);\n\n//   // GET ALL NOTES\n//   const fetchNotes = async () => {\n//     setLoading(true);\n\n//     try {\n//       // HIT BACKEND CAL\n//       const res = await api.get(\"/notes\");\n//       //   STORE RESPONSE IN STATE, UPDATE STATE\n//       setNotes(res.data);\n//     } catch (e) {\n//       console.error(\"Error fetching notes:\", e);\n//     } finally {\n//       //   HIDE LOADING AFTER FETCH\n//       setLoading(false);\n//     }\n//   };\n//   const addNote = async ({ title, text }) => {\n//     try {\n//       const res = await api.post(\"/notes/create\", { title, content: text });\n//       setNotes((prevNotes) => [...prevNotes, res.data]);\n//     } catch (e) {\n//       console.error(\"Error adding note:\", e);\n//     }\n//   };\n//   const editNote = async ({ id, title, text }) => {\n//     try {\n//       const res = await api.patch(`/notes${id}`, { title, content: text });\n//       setNotes((prevNotes) =>\n//         prevNotes.map((note) => (note.id === id ? res.data : note))\n//       );\n//     } catch (e) {\n//       console.error(\"Error editing note:\", e);\n//     }\n//   };\n\n//   const deleteNote = async ({ id, title, text }) => {\n//     try {\n//       const res = await api.delete(\"/notes\", { title, context: text });\n//     } catch (e) {\n//       console.error(\"Error deleting note\");\n//     }\n//   };\n\n//   return (\n//     <FormContext.Provider\n//       value={{ notes, loading, fetchNotes, addNote, editNote, deleteNote }}\n//     >\n//       {children}\n//     </FormContext.Provider>\n//   );\n// };\n\n// export const useFormContext = () => useContext(FormContext);\n\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}